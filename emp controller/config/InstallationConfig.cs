// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using config;
//
//    var installationConfig = InstallationConfig.FromJson(jsonString);

namespace emp_controller.config
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class InstallationConfig
    {
        [JsonProperty("php")]
        public config Php { get; set; }

        [JsonProperty("nginx")]
        public config Nginx { get; set; }

        [JsonProperty("mysql")]
        public config Mysql { get; set; }

        [JsonProperty("phpmyadmin")]
        public config Phpmyadmin { get; set; }
    }

    public partial class config
    {
        [JsonProperty("installed")]
        public bool Installed { get; set; }

        [JsonProperty("date")]
        public string Date { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }
    }

    public partial class InstallationConfig
    {
        public static InstallationConfig FromJson(string json) => JsonConvert.DeserializeObject<InstallationConfig>(json, emp_controller.config.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this InstallationConfig self) => JsonConvert.SerializeObject(self,emp_controller.config.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}